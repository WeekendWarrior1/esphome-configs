esphome:
  name: loungebackdoor
  platform: ESP32
  board: wemos_d1_mini32
  platformio_options:
    upload_speed: 921600
  # platform: ESP8266
  # board: d1_mini
  # on_boot:
  #   priority: 700
  #   then:
  #     - output.set_level:
  #         id: motor_speed_control
  #         level: 0%
#on boot: if not top endstop, reverse until you find it, then set rotary encoder to 0

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "loungebackdoor Fallback Hotspot"
    password: !secret ap_pass
  manual_ip:
    static_ip: 192.168.1.119
    gateway: 192.168.1.1
    subnet: 255.255.255.0

# Enable logging
logger:
  level: DEBUG
  # level: INFO

ota:

api:

web_server:
  port: 80


sensor:
  - platform: rotary_encoder
    id: my_rotary_encoder
    internal: true
    name: "Rotary Encoder"
    pin_a: GPIO18
    pin_b: GPIO19
    # pin_a: GPIO34
    # pin_b: GPIO10

output:                 # https://learn.adafruit.com/improve-brushed-dc-motor-performance/introduction
  - platform: ledc
    pin: GPIO21
    # pin: GPIO33
    id: motor_forward_pin
    frequency: 32Hz #https://esphome.io/components/output/ledc.html#recommended-frequencies
  - platform: ledc
    pin: GPIO22
    # pin: GPIO18
    id: motor_reverse_pin
    frequency: 32Hz #https://esphome.io/components/output/ledc.html#recommended-frequencies


fan:
  - platform: hbridge
    internal: true
    name: hbridge_motor
    id: hbridge_motor
    pin_a: motor_forward_pin
    pin_b: motor_reverse_pin
    # enable_pin: motor_enable
    decay_mode: slow   # slow decay mode (braking) or fast decay (coasting).
    speed_count: 50

stepper:
  - platform: feedback_fan
    id: my_closed_loop_motor
    initial_output: 30
    min_output: 10
    positional_threshold: 50
    sensor_id: my_rotary_encoder
    fan_id: hbridge_motor
    # max_speed: inf
    max_speed: 500 steps/s
    #acceleration: 20 steps/s^2
    #deceleration: 20 steps/s^2



# dc_motor:    # based off stepper?
#   - platform: h_bridge   # outputs?
#     id: my_dc_motor
#     forward: motor1_forward 
#     reverse: motor1_reverse # optional
#     decay: slow   # slow decay mode (braking) or fast decay (coasting).
#     feedback: my_rotary_encoder    #optional    # sensor, pulse counter or rotary encoder, what about i2c as5600



    # or 
    # feedback:       # - dc_motor.set_target:
      #     id: mainStepper
      #     target: !lambda return id(my_rotary_encoder).value;
    #   id: mypulsecounter
    #   set_speed: 10 steps/s   # 1 full rotation every 2 seconds
    #   acceleration: 4 steps/s^2
    #   deceleration: 5 steps/s^2
    #   override_forward_control: my_buck_dac variable voltage supply   #optional
    #   override_reverse_control: my_buck_dac variable voltage supply   #optional
    #   control_parameters:   #should this have default values?     # https://esphome.io/components/climate/pid.html
    #     kp: 0.49460
    #     ki: 0.00487
    #     kd: 12.56301

cover:
  - platform: template
    device_class: shade
    name: "Lounge Backdoor Blind"
    open_action:
      - stepper.set_speed:
          id: my_closed_loop_motor
          speed: 1000 steps/s
      # - stepper.set_acceleration:
      #     id: my_closed_loop_motor
      #     acceleration: 10 steps/s^2
      # - stepper.set_deceleration:
      #     id: my_closed_loop_motor
      #     deceleration: 2 steps/s^2
      - stepper.feedback_fan.set_initial_output:
          id: my_closed_loop_motor
          initial_output: 40

      - stepper.set_target:
          id: my_closed_loop_motor
          target: 0
          # target: -20000

    close_action:
      - stepper.set_speed:
          id: my_closed_loop_motor
          speed: 500 steps/s
      # - stepper.set_acceleration:
      #     id: my_closed_loop_motor
      #     acceleration: 1 steps/s^2
      # - stepper.set_deceleration:
      #     id: my_closed_loop_motor
      #     deceleration: 1 steps/s^2
      - stepper.feedback_fan.set_initial_output:
          id: my_closed_loop_motor
          initial_output: 10

      - stepper.set_target:
          id: my_closed_loop_motor
          target: 36000
          # target: 0

    stop_action:
      # - dc_motor.set_target:
      #     id: mainStepper
      #     target: !lambda return id(my_rotary_encoder).value;
      - stepper.set_target:
          id: my_closed_loop_motor
          target: !lambda return id(my_rotary_encoder).state;

      # - fan.turn_off: motor_forward
      # - fan.turn_off: motor_reverse

      - hbridge.brake: hbridge_motor
      - delay: 1s
      - fan.turn_off: hbridge_motor

    optimistic: true